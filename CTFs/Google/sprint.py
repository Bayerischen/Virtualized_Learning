import sys

fmt = [
'%1$00038s%3$hn%1$65498s%1$28672s%9$hn',
'%1$00074s%3$hn%1$65462s%1$*8$s%7$hn',
'%1$00108s%3$hn%1$65428s%1$1s%6$hn',
'%1$00149s%3$hn%1$65387s%1$*8$s%1$2s%7$hn',
'%1$00183s%3$hn%1$65353s%1$1s%6$hn',
'%1$00218s%3$hn%1$65318s%1$2s%11$hn',
'%1$00264s%3$hn%1$65272s%1$*10$s%1$*10$s%17$hn',
'%1$00310s%3$hn%1$65226s%1$28672s%1$*16$s%7$hn',
'%1$00347s%3$hn%1$65189s%1$*5$s%15$hn',
'%14$c%1$00419s%2$c%4$s%1$65499s%3$hn',
'%1$00430s%3$hn%1$65106s%1$*10$s%1$*10$s%13$hn',
'%1$00468s%3$hn%1$65068s%1$65519s%7$hn',
'%1$00505s%3$hn%1$65031s%1$*12$s%6$hn',
'%1$00543s%3$hn%1$64993s%1$65520s%7$hn',
'%1$00580s%3$hn%1$64956s%1$*5$s%15$hn',
'%14$c%1$00186s%2$c%4$s%1$00429s%3$hn',
'%1$00663s%3$hn%1$64873s%1$*12$s%1$*12$s%17$hn',
'%1$00709s%3$hn%1$64827s%1$28672s%1$*16$s%7$hn',
'%1$00743s%3$hn%1$64793s%1$1s%6$hn',
'%1$00789s%3$hn%1$64747s%1$*12$s%1$*10$s%13$hn',
'%1$00430s%3$hn',
'%1$00847s%3$hn%1$64689s%1$*10$s%1$1s%11$hn',
'%10$c%1$64869s%2$c%4$s%1$01549s%3$hn',
'%1$00922s%3$hn%1$64614s%1$57344s%9$hn',
'%1$00957s%3$hn%1$64579s%1$0s%11$hn',
'%1$00993s%3$hn%1$64543s%1$*8$s%7$hn',
'%1$01030s%3$hn%1$64506s%1$*5$s%13$hn',
'%12$c%1$00014s%2$c%4$s%1$01051s%3$hn',
'%1$01185s%3$hn',
'%1$01129s%3$hn%1$64407s%1$*10$s%1$65535s%11$hn',
'%1$01170s%3$hn%1$64366s%1$*8$s%1$1s%9$hn',
'%1$00957s%3$hn',
'%1$01232s%3$hn%1$64304s%1$*10$s%1$00254s%17$hn',
'%16$c%1$00014s%2$c%4$s%1$01253s%3$hn',
'%1$01334s%3$hn',
'%1$01319s%3$hn%1$64217s%1$5s%23$hn',
'%1$05081s%3$hn',
'%1$01368s%3$hn%1$64168s%1$0s%9$hn',
'%1$01403s%3$hn%1$64133s%1$0s%11$hn',
'%1$01441s%3$hn%1$64095s%1$61696s%7$hn',
'%1$01478s%3$hn%1$64058s%1$*5$s%13$hn',
'%1$01513s%3$hn%1$64023s%1$1s%15$hn',
'%1$01548s%3$hn%1$63988s%1$0s%23$hn',
'%1$01593s%3$hn%1$63943s%1$57344s%1$*8$s%7$hn',
'%1$01630s%3$hn%1$63906s%1$*5$s%17$hn',
'%16$c%1$00014s%2$c%4$s%1$01651s%3$hn',
'%1$03479s%3$hn',
'%1$01723s%3$hn%1$63813s%1$*8$s%1$1s%9$hn',
'%1$01770s%3$hn%1$63766s%1$*16$s%1$65419s%19$hn',
'%18$c%1$00053s%2$c%4$s%1$01752s%3$hn',
'%1$01846s%3$hn%1$63690s%1$65520s%17$hn',
'%1$02373s%3$hn',
'%1$01908s%3$hn%1$63628s%1$*16$s%1$65422s%19$hn',
'%18$c%1$00049s%2$c%4$s%1$01894s%3$hn',
'%1$01980s%3$hn%1$63556s%1$1s%17$hn',
'%1$02373s%3$hn',
'%1$02042s%3$hn%1$63494s%1$*16$s%1$65436s%19$hn',
'%18$c%1$00050s%2$c%4$s%1$02027s%3$hn',
'%1$02115s%3$hn%1$63421s%1$16s%17$hn',
'%1$02373s%3$hn',
'%1$02177s%3$hn%1$63359s%1$*16$s%1$65428s%19$hn',
'%18$c%1$00053s%2$c%4$s%1$02159s%3$hn',
'%1$02253s%3$hn%1$63283s%1$65535s%17$hn',
'%1$02373s%3$hn',
'%1$02303s%3$hn%1$63233s%1$0s%15$hn',
'%1$02338s%3$hn%1$63198s%1$0s%17$hn',
'%1$02373s%3$hn%1$63163s%1$1s%23$hn',
'%1$02419s%3$hn%1$63117s%1$*12$s%1$*16$s%13$hn',
'%1$02457s%3$hn%1$63079s%1$65519s%7$hn',
'%1$02494s%3$hn%1$63042s%1$*12$s%6$hn',
'%1$02532s%3$hn%1$63004s%1$65520s%7$hn',
'%1$02569s%3$hn%1$62967s%1$*5$s%17$hn',
'%16$c%1$00822s%2$c%4$s%1$01782s%3$hn',
'%1$02652s%3$hn%1$62884s%1$61440s%1$*12$s%7$hn',
'%1$02689s%3$hn%1$62847s%1$*5$s%17$hn',
'%1$02727s%3$hn%1$62809s%1$65519s%7$hn',
'%1$02764s%3$hn%1$62772s%1$*16$s%6$hn',
'%1$02802s%3$hn%1$62734s%1$65520s%7$hn',
'%1$02836s%3$hn%1$62700s%1$0s%6$hn',
'%1$02874s%3$hn%1$62662s%1$65519s%7$hn',
'%1$02911s%3$hn%1$62625s%1$*5$s%17$hn',
'%1$02957s%3$hn%1$62579s%1$*16$s%1$*16$s%17$hn',
'%1$03003s%3$hn%1$62533s%1$28672s%1$*16$s%7$hn',
'%1$03040s%3$hn%1$62496s%1$*5$s%17$hn',
'%16$c%1$00266s%2$c%4$s%1$02809s%3$hn',
'%1$03120s%3$hn%1$62416s%1$*10$s%1$1s%17$hn',
'%1$03166s%3$hn%1$62370s%1$61698s%1$*16$s%7$hn',
'%1$03203s%3$hn%1$62333s%1$*5$s%17$hn',
'%1$03249s%3$hn%1$62287s%1$*16$s%1$*12$s%17$hn',
'%16$c%1$00042s%2$c%4$s%1$03242s%3$hn',
'%1$03329s%3$hn%1$62207s%1$*10$s%1$1s%11$hn',
'%1$01548s%3$hn',
'%1$03379s%3$hn%1$62157s%1$0s%15$hn',
'%1$03414s%3$hn%1$62122s%1$2s%23$hn',
'%1$01548s%3$hn',
'%1$03464s%3$hn%1$62072s%1$4s%23$hn',
'%1$65534s%3$hn',
'%14$c%1$00014s%2$c%4$s%1$03500s%3$hn',
'%1$05081s%3$hn',
'%1$03578s%3$hn%1$61958s%1$*10$s%1$65527s%17$hn',
'%16$c%1$00014s%2$c%4$s%1$03599s%3$hn',
'%1$03680s%3$hn',
'%1$03665s%3$hn%1$61871s%1$3s%23$hn',
'%1$05081s%3$hn',
'%1$03714s%3$hn%1$61822s%1$0s%9$hn',
'%1$03749s%3$hn%1$61787s%1$0s%11$hn',
'%1$03795s%3$hn%1$61741s%1$*8$s%1$65497s%13$hn',
'%12$c%1$00014s%2$c%4$s%1$03816s%3$hn',
'%1$04987s%3$hn',
'%1$03882s%3$hn%1$61654s%1$4s%15$hn',
'%1$03917s%3$hn%1$61619s%1$0s%13$hn',
'%1$03963s%3$hn%1$61573s%1$*12$s%1$*12$s%13$hn',
'%1$04009s%3$hn%1$61527s%1$*12$s%1$*12$s%13$hn',
'%1$04055s%3$hn%1$61481s%1$57344s%1$*10$s%7$hn',
'%1$04092s%3$hn%1$61444s%1$*5$s%17$hn',
'%1$04139s%3$hn%1$61397s%1$*16$s%1$65419s%19$hn',
'%18$c%1$00014s%2$c%4$s%1$04160s%3$hn',
'%1$04632s%3$hn',
'%1$04238s%3$hn%1$61298s%1$*16$s%1$65422s%19$hn',
'%18$c%1$00057s%2$c%4$s%1$04216s%3$hn',
'%1$04318s%3$hn%1$61218s%1$*12$s%1$1s%13$hn',
'%1$04632s%3$hn',
'%1$04380s%3$hn%1$61156s%1$*16$s%1$65436s%19$hn',
'%18$c%1$00057s%2$c%4$s%1$04358s%3$hn',
'%1$04460s%3$hn%1$61076s%1$*12$s%1$2s%13$hn',
'%1$04632s%3$hn',
'%1$04522s%3$hn%1$61014s%1$*16$s%1$65428s%19$hn',
'%18$c%1$00057s%2$c%4$s%1$04500s%3$hn',
'%1$04602s%3$hn%1$60934s%1$*12$s%1$3s%13$hn',
'%1$04632s%3$hn',
'%1$05081s%3$hn',
'%1$04675s%3$hn%1$60861s%1$*10$s%1$1s%11$hn',
'%1$04722s%3$hn%1$60814s%1$*14$s%1$65535s%15$hn',
'%14$c%1$64693s%2$c%4$s%1$05600s%3$hn',
'%1$04804s%3$hn%1$60732s%1$61708s%1$*8$s%7$hn',
'%1$04841s%3$hn%1$60695s%1$*5$s%15$hn',
'%1$04886s%3$hn%1$60650s%1$59392s%1$*8$s%7$hn',
'%1$04931s%3$hn%1$60605s%1$*14$s%1$*12$s%6$hn',
'%1$04972s%3$hn%1$60564s%1$*8$s%1$1s%9$hn',
'%1$03749s%3$hn',
'%1$05032s%3$hn%1$60504s%1$59392s%1$*8$s%7$hn',
'%1$05066s%3$hn%1$60470s%1$0s%6$hn',
'%1$65534s%3$hn',
'%1$05119s%3$hn%1$60417s%1$59392s%7$hn',
'%1$05153s%3$hn%1$60383s%1$0s%6$hn',
'%1$65534s%3$hn',
]

code_ptr = 0

ban = [9,15,22,27,33,45,49,53,57,61,72,84,89,97,100,107,116,119,123,127,133]
show = [20,28,31,34,36,46,51,55,59,63,91,94,96,98,101,103,108,117,121,125,129,130,139,142,145]
args = [
    "P","","0","code_ptr","buffer","*reg1","*reg1","reg1","reg2","reg2","reg3","reg3",
    "reg4","reg4","reg5","reg5","reg6","reg6","reg7","reg7","reg8","reg8","reg9","reg9"]

number = 0

for i in range(len(fmt)):
    #------------------------------------------------------------
    #code_ptr
    print "loc_" + str(code_ptr) + ":       ",
    code_ptr = 0
    number = 0
    pos1 = 0
    pos2 = 0
    pos3 = 0
    pos4 = 0
    flag1 = 0
    flag2 = 0
    flag3 = 0
    flag4 = 0
    flag5 = 0
    flag6 = 0

    if i not in ban and i not in show:
        for j in range(3, 8):
            if fmt[i][j] != '0' and j != 3:
                code_ptr += long(fmt[i][j]) * pow(10,(7-j))
    else:
        for k in range(i+1):
            code_ptr += len(fmt[k])
        code_ptr += i
        code_ptr += 1
    #------------------------------------------------------------
    #14$c%1$00419s%2$c%4$s%1$65499s%3$hn
    pos5 = 0
    TRUE = 0
    FALSE = 0
    if i in ban:
        flag6 = 1
        for j in range(len(fmt[i])):
            if fmt[i][j] == '$':
                TRUE += 1
                FALSE += 1
                for k in range(j-1,0,-1):
                    pos5 += int(fmt[i][k]) * pow(10,j-k-1)
                for l in range(j+5, len(fmt[i])):
                    if fmt[i][l] == 's':
                        for m in range(l-1,j+4,-1):
                            TRUE += int(fmt[i][m]) * pow(10,l-m-1)
                            FALSE += int(fmt[i][m]) * pow(10,l-m-1)
                        TRUE += TRUE

                        break
                for m in range(len(fmt[i])):
                    if fmt[i][m] == 's' and fmt[i][m+1] == '%' and fmt[i][m+2] == '3':
                        for n in range(m-1,m-6,-1):
                            TRUE += int(fmt[i][n]) * pow(10,m-n-1)
                            FALSE += int(fmt[i][n]) * pow(10,m-n-1)
                        break
                TRUE += 1
                FALSE += 1
                TRUE = TRUE % 65536
                FALSE = FALSE % 65536
                break
    # ------------------------------------------------------------
    # %1$00430s%3$hn
    CODE = 0
    if i in show:
        for j in range(len(fmt[i])):
            if fmt[i][j] == 's':
                for k in range(j-1,j-6,-1):
                    CODE += int(fmt[i][k]) * pow(10,j-k-1)
        if (CODE >> 15) == 1:
            CODE = CODE - 65536
        if CODE < 0:
            print "bad"
        else:
            print args[3] + "=" + str(CODE)
    else:
        for j in range(26,len(fmt[i])):
            if fmt[i][j] == "*":
                flag2 = 1
                # ------------------------------------------------------------
                # *8$s%7$hn
                # *12$s%6$hn
                for k in range(j,len(fmt[i])):
                    if fmt[i][k] == "$":
                        for l in range(k-1,j,-1):
                            pos2 += int(fmt[i][l]) * pow(10,(k-1-l))
                        break
                for l in range(k+2,len(fmt[i])):
                    if fmt[i][l] == "$":
                        for m in range(l-1,k+2,-1):
                            pos1 += int(fmt[i][m]) * pow(10,(l-m-1))
                        break
                # ------------------------------------------------------------
                # *8$s%1$2s%7$hn
                # *10$s%1$1s%11$hn
                # *10$s%1$65535s%11$hn
                for n in range(k,len(fmt[i])):
                    if fmt[i][n-1] == "%" and fmt[i][n] == "1" and fmt[i][n+1] == "$" and fmt[i][n+2] != "*":
                        flag3 = 1
                        flag2 = 0
                        pos1 = 0
                        for o in range(n,len(fmt[i])):
                            if fmt[i][o] == "s":
                                for p in range(o-1,n+1,-1):
                                    number += int(fmt[i][p]) * pow(10,(o-p-1))
                                if (number >> 15) == 1:
                                    number = number - 65536
                                break
                        for q in range(p+3,len(fmt[i])):
                            if fmt[i][q] == "$":
                                for r in range(q-1,o+1,-1):
                                    pos1 += int(fmt[i][r]) * pow(10,(q-r-1))
                # ------------------------------------------------------------
                # *10$s%1$*10$s%17$hn
                for j in range(k,len(fmt[i])):
                    if fmt[i][j] == "*":
                        flag2 = 0
                        flag4 = 1
                        pos1 = 0
                        for l in range(j,len(fmt[i])):
                             if fmt[i][l] == "$":
                                 for m in range(l-1,j,-1):
                                     pos3 += int(fmt[i][m]) * pow(10,l-m-1)
                                 break
                        for n in range(l+3,len(fmt[i])):
                            if fmt[i][n] == "$":
                                for o in range(n-1,l+2,-1):
                                    pos1 += int(fmt[i][o]) * pow(10,n-o-1)
                break
                # ------------------------------------------------------------

        # ------------------------------------------------------------
        # 28672s%1$*16$s%7$hn'
        for j in range(26, len(fmt[i])):
            if fmt[i][j] == '%' and fmt[i][26] != '*':
                flag5 = 1
                flag2 = 0
                for k in range(j - 2, 25, -1):
                    if fmt[i][k] != '$':
                        number += int(fmt[i][k]) * pow(10, j - k - 2)
                    else:
                        break
                if (number >> 15) == 1:
                    number = number - 65536
                for l in range(j, len(fmt[i])):
                    if fmt[i][l] == '*':
                        for m in range(l, len(fmt[i])):
                            if fmt[i][m] == '$':
                                for n in range(m - 1, l, -1):
                                    pos4 += int(fmt[i][n]) * pow(10, m - n - 1)
                                break
        # ------------------------------------------------------------
        # 28672s%9$hn
        # 5s%23$hn
        for j in range(26, len(fmt[i])):
            if fmt[i][j] == '%' and fmt[i][26] != '*' and "*" not in fmt[i]:
                flag1 = 1
                flag5 = 0
                number = 0
                for k in range(j-2,25,-1):
                    number += int(fmt[i][k]) * pow(10,j-k-2)
                for l in range(j,len(fmt[i])):
                    if fmt[i][l] == '$':
                        for m in range(l-1,j,-1):
                            pos1 += int(fmt[i][m]) * pow(10, (l - m - 1))
                if (number >> 15) == 1:
                    number = number - 65536
                break
        # ------------------------------------------------------------
        if flag1 and not flag6:
            print args[pos1] + "=" + str(hex(number))
        if flag2:
            print args[pos1] + "=" + args[pos2]
        if flag3:
            if number > 0:
                print args[pos1] + "=" + args[pos2] + "+" + str(number)
            else:
                print args[pos1] + "=" + args[pos2] + str(number)
        if flag4:
            print args[pos1] + "=" + args[pos2] + "+" + args[pos3]
        if flag5:
            print args[pos1] + "=" + str(hex(number)) + "+" +  args[pos4]
        if flag6:
            print "if " + args[pos5] + " goto " + str(TRUE) + " else goto " + str(FALSE)

